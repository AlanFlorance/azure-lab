{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.63.48766",
      "templateHash": "6328897704546706507"
    }
  },
  "parameters": {
    "prefix": {
      "type": "string"
    },
    "regionShortCode": {
      "type": "string"
    },
    "rgName": {
      "type": "string"
    },
    "addressSpacePrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24"
    },
    "vnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/25"
    },
    "vmNamePrefix": {
      "type": "string",
      "defaultValue": "dc"
    },
    "dnsServers": {
      "type": "array",
      "defaultValue": [
        "168.63.129.16"
      ]
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "count": {
      "type": "int",
      "defaultValue": 2
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2ms"
    },
    "ahub": {
      "type": "bool",
      "defaultValue": false
    },
    "ntdsSizeGB": {
      "type": "int",
      "defaultValue": 20
    },
    "sysVolSizeGB": {
      "type": "int",
      "defaultValue": 20
    },
    "localAdminUsername": {
      "type": "string",
      "defaultValue": "azure_ad_groot"
    },
    "localAdminPassword": {
      "type": "secureString"
    },
    "timeZoneId": {
      "type": "string",
      "defaultValue": "Eastern Standard Time"
    },
    "dscConfigScript": {
      "type": "string",
      "defaultValue": "https://github.com/lukearp/Azure-IAC-Bicep/releases/download/DSC/DomainControllerConfig.zip"
    },
    "domainFqdn": {
      "type": "string",
      "defaultValue": "fskelly.com"
    },
    "newForest": {
      "type": "bool",
      "defaultValue": true
    },
    "domainAdminPassword": {
      "type": "secureString"
    },
    "site": {
      "type": "string",
      "defaultValue": "Default-First-Site-Name"
    },
    "psScriptLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/lukearp/Azure-IAC-Bicep/master/Scripts/Restart-Vms/restart-vms.ps1"
    },
    "bastionSubnetIpPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.128/27"
    },
    "bastionHostName": {
      "type": "string"
    }
  },
  "functions": [],
  "variables": {
    "copy": [
      {
        "name": "zones",
        "count": "[length(range(0, parameters('count')))]",
        "input": "[if(contains(variables('azRegions'), parameters('location')), createArray(string(if(or(or(equals(range(0, parameters('count'))[copyIndex('zones')], 0), equals(range(0, parameters('count'))[copyIndex('zones')], 3)), equals(range(0, parameters('count'))[copyIndex('zones')], 6)), 1, if(or(or(equals(range(0, parameters('count'))[copyIndex('zones')], 1), equals(range(0, parameters('count'))[copyIndex('zones')], 4)), equals(range(0, parameters('count'))[copyIndex('zones')], 7)), 2, 3)))), createArray())]"
      }
    ],
    "azRegions": [
      "eastus",
      "eastus2",
      "centralus",
      "southcentralus",
      "usgovvirginia",
      "westus2",
      "westus3"
    ],
    "bastionSubnetName": "AzureBastionSubnet",
    "publicIpAddressName": "[format('{0}-pip', parameters('bastionHostName'))]",
    "domainUserName": "[if(equals(parameters('newForest'), true()), format('{0}\\{1}', split(parameters('domainFqdn'), '.')[0], parameters('localAdminUsername')), variables('domainAdminUsername'))]",
    "domainPassword": "[if(equals(parameters('newForest'), true()), parameters('localAdminPassword'), parameters('domainAdminPassword'))]",
    "domainSite": "[if(equals(parameters('newForest'), true()), 'Default-First-Site-Name', parameters('site'))]",
    "vnetName": "[format('{0}-{1}-adds-vnet', parameters('prefix'), parameters('regionShortCode'))]",
    "avSetName": "[format('{0}-{1}-avset-1', parameters('prefix'), parameters('regionShortCode'))]",
    "managedIdentityName": "[format('{0}-{1}-msi1', parameters('prefix'), parameters('regionShortCode'))]",
    "fullManagedIdentityID": "[format('/subscriptions/949ef534-07f5-4138-8b79-aae16a71310c/resourceGroups/{0}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{1}', parameters('rgName'), variables('managedIdentityName'))]",
    "domainAdminUsername": "[format('{0}@{1}', parameters('localAdminUsername'), parameters('domainFqdn'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('publicIpAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "copy": {
        "name": "nics",
        "count": "[length(range(0, parameters('count')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-nic', parameters('vmNamePrefix'), add(range(0, parameters('count'))[copyIndex()], 1))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "dc",
            "properties": {
              "primary": true,
              "subnet": {
                "id": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnet-deploy'), '2019-10-01').outputs.vnetID.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deploy'), '2019-10-01').outputs.subnetName.value)]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deploy')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}-1', parameters('vmNamePrefix'))]",
      "location": "[parameters('location')]",
      "zones": "[variables('zones')[0]]",
      "properties": "[reference(resourceId('Microsoft.Resources/deployments', 'Properties-Builder'), '2019-10-01').outputs.vmProperties.value[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'Properties-Builder')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}-1/DC-Creation', parameters('vmNamePrefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.73",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "modulesUrl": "[parameters('dscConfigScript')]",
          "configurationFunction": "DomainControllerConfig.ps1\\DomainControllerConfig",
          "properties": [
            {
              "Name": "creds",
              "Value": {
                "UserName": "[variables('domainUserName')]",
                "Password": "PrivateSettingsRef:domainPassword"
              },
              "TypeName": "System.Management.Automation.PSCredential"
            },
            {
              "Name": "domain",
              "Value": "[parameters('domainFqdn')]",
              "TypeName": "System.String"
            },
            {
              "Name": "site",
              "Value": "[variables('domainSite')]",
              "TypeName": "System.String"
            },
            {
              "Name": "newForest",
              "Value": "[parameters('newForest')]",
              "TypeName": "System.Boolean"
            }
          ]
        },
        "protectedSettings": {
          "Items": {
            "domainPassword": "[variables('domainPassword')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-1', parameters('vmNamePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-rebootDc', format('{0}-1', parameters('vmNamePrefix')))]",
      "kind": "AzurePowerShell",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('fullManagedIdentityID')]": {}
        }
      },
      "properties": {
        "arguments": "[format('{0} {1} {2}', array(format('{0}-1', parameters('vmNamePrefix'))), resourceGroup().name, subscription().subscriptionId)]",
        "primaryScriptUri": "[parameters('psScriptLocation')]",
        "azPowerShellVersion": "5.9",
        "retentionInterval": "PT1H"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-1', parameters('vmNamePrefix')))]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', split(format('{0}-1/DC-Creation', parameters('vmNamePrefix')), '/')[0], split(format('{0}-1/DC-Creation', parameters('vmNamePrefix')), '/')[1])]"
      ]
    },
    {
      "condition": "[greater(parameters('count'), 1)]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}-2', parameters('vmNamePrefix'))]",
      "location": "[parameters('location')]",
      "zones": "[variables('zones')[1]]",
      "properties": "[reference(resourceId('Microsoft.Resources/deployments', 'Properties-Builder'), '2019-10-01').outputs.vmProperties.value[1]]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', format('{0}-rebootDc', format('{0}-1', parameters('vmNamePrefix'))))]",
        "[resourceId('Microsoft.Resources/deployments', 'Properties-Builder')]"
      ]
    },
    {
      "condition": "[greater(parameters('count'), 1)]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}-2/DC-Creation', parameters('vmNamePrefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.73",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "modulesUrl": "[parameters('dscConfigScript')]",
          "configurationFunction": "DomainControllerConfig.ps1\\DomainControllerConfig",
          "properties": [
            {
              "Name": "creds",
              "Value": {
                "UserName": "[variables('domainUserName')]",
                "Password": "PrivateSettingsRef:domainPassword"
              },
              "TypeName": "System.Management.Automation.PSCredential"
            },
            {
              "Name": "domain",
              "Value": "[parameters('domainFqdn')]",
              "TypeName": "System.String"
            },
            {
              "Name": "site",
              "Value": "[variables('domainSite')]",
              "TypeName": "System.String"
            },
            {
              "Name": "newForest",
              "Value": false,
              "TypeName": "System.Boolean"
            }
          ]
        },
        "protectedSettings": {
          "Items": {
            "domainPassword": "[variables('domainPassword')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-2', parameters('vmNamePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-rebootOtherVms', format('{0}-2', parameters('vmNamePrefix')))]",
      "kind": "AzurePowerShell",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('fullManagedIdentityID')]": {}
        }
      },
      "properties": {
        "arguments": "[format('{0} {1} {2}', array(format('{0}-2', parameters('vmNamePrefix'))), resourceGroup().name, subscription().subscriptionId)]",
        "primaryScriptUri": "[parameters('psScriptLocation')]",
        "azPowerShellVersion": "5.9",
        "retentionInterval": "PT1H"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-2', parameters('vmNamePrefix')))]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', split(format('{0}-2/DC-Creation', parameters('vmNamePrefix')), '/')[0], split(format('{0}-2/DC-Creation', parameters('vmNamePrefix')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "vnet-deploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "addressSpacePrefix": {
            "value": "[parameters('addressSpacePrefix')]"
          },
          "vnetPrefix": {
            "value": "[parameters('vnetPrefix')]"
          },
          "bastionSubnetName": {
            "value": "[variables('bastionSubnetName')]"
          },
          "bastionSubnetIpPrefix": {
            "value": "[parameters('bastionSubnetIpPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "13954226888486375768"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "addressSpacePrefix": {
              "type": "string"
            },
            "vnetPrefix": {
              "type": "string"
            },
            "vnetLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "resourceTags": {
              "type": "object",
              "defaultValue": {
                "Environment": "Dev",
                "Project": "Tutorial",
                "Purpose": "Hybrid Connectivity"
              }
            },
            "bastionSubnetName": {
              "type": "string"
            },
            "bastionSubnetIpPrefix": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-06-01",
              "name": "[parameters('vnetName')]",
              "tags": "[parameters('resourceTags')]",
              "location": "[parameters('vnetLocation')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('addressSpacePrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "defaultSubnet",
                    "properties": {
                      "addressPrefix": "[parameters('vnetPrefix')]"
                    }
                  },
                  {
                    "name": "[parameters('bastionSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('bastionSubnetIpPrefix')]"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "vnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "subnetName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))).subnets[0].name]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "deploy-managedIdentity",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[variables('managedIdentityName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "5284932098858153567"
            }
          },
          "parameters": {
            "managedIdentityName": {
              "type": "string"
            },
            "roleNameGuid": {
              "type": "string",
              "defaultValue": "[newGuid()]"
            },
            "builtInRoleType": {
              "type": "string",
              "defaultValue": "Contributor",
              "metadata": {
                "description": "Built-in role to assign"
              },
              "allowedValues": [
                "Owner",
                "Contributor",
                "Reader"
              ]
            }
          },
          "functions": [],
          "variables": {
            "role": {
              "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
              "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
              "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[resourceGroup().location]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[parameters('roleNameGuid')]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))).principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            }
          ],
          "outputs": {
            "managedIdentityID": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "managedIdentityName": {
              "type": "string",
              "value": "[parameters('managedIdentityName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "deploy-avset",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "avSetName": {
            "value": "[variables('avSetName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "7512003015750693707"
            }
          },
          "parameters": {
            "avSetName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2020-12-01",
              "name": "[parameters('avSetName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Aligned"
              },
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              }
            }
          ],
          "outputs": {
            "avSetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('avSetName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "set-dns-nic",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsServers": {
            "value": "[parameters('dnsServers')]"
          },
          "nics": {
            "copy": [
              {
                "name": "value",
                "count": "[length(range(0, parameters('count')))]",
                "input": "[createObject('name', format('{0}-{1}-nic', parameters('vmNamePrefix'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex('value')]], 1)), 'ipConfigurations', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('vmNamePrefix'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex('value')]], 1)))).ipConfigurations)]"
              }
            ]
          },
          "count": {
            "value": "[parameters('count')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "2242687886418450381"
            }
          },
          "parameters": {
            "nics": {
              "type": "array"
            },
            "dnsServers": {
              "type": "array"
            },
            "count": {
              "type": "int"
            },
            "location": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "dnsIps",
                "count": "[length(range(0, parameters('count')))]",
                "input": "[parameters('nics')[range(0, parameters('count'))[copyIndex('dnsIps')]].ipConfigurations[0].properties.privateIPAddress]"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "nicsDns",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-11-01",
              "name": "[parameters('nics')[range(0, parameters('count'))[copyIndex()]].name]",
              "location": "[parameters('location')]",
              "properties": {
                "dnsSettings": {
                  "dnsServers": "[concat(variables('dnsIps'), parameters('dnsServers'))]"
                },
                "ipConfigurations": "[parameters('nics')[range(0, parameters('count'))[copyIndex()]].ipConfigurations]"
              }
            }
          ],
          "outputs": {
            "nicIds": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, parameters('count')))]",
                "input": {
                  "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nics')[range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]]].name)]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "nics"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "Properties-Builder",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ahub": {
            "value": "[parameters('ahub')]"
          },
          "avsetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-avset'), '2019-10-01').outputs.avSetID.value]"
          },
          "count": {
            "value": "[parameters('count')]"
          },
          "localAdminPassword": {
            "value": "[parameters('localAdminPassword')]"
          },
          "localAdminUsername": {
            "value": "[parameters('localAdminUsername')]"
          },
          "nics": {
            "copy": [
              {
                "name": "value",
                "count": "[length(range(0, parameters('count')))]",
                "input": "[createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'set-dns-nic'), '2019-10-01').outputs.nicIds.value[range(0, parameters('count'))[copyIndex('value')]].id)]"
              }
            ]
          },
          "ntdsSizeGB": {
            "value": "[parameters('ntdsSizeGB')]"
          },
          "sysVolSizeGB": {
            "value": "[parameters('sysVolSizeGB')]"
          },
          "timeZoneId": {
            "value": "[parameters('timeZoneId')]"
          },
          "vmNamePrefix": {
            "value": "[parameters('vmNamePrefix')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "zones": {
            "value": "[variables('zones')[0]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "1092415610394125393"
            }
          },
          "parameters": {
            "vmNamePrefix": {
              "type": "string"
            },
            "count": {
              "type": "int"
            },
            "zones": {
              "type": "array"
            },
            "ahub": {
              "type": "bool"
            },
            "nics": {
              "type": "array"
            },
            "localAdminUsername": {
              "type": "string"
            },
            "localAdminPassword": {
              "type": "secureString"
            },
            "timeZoneId": {
              "type": "string"
            },
            "ntdsSizeGB": {
              "type": "int"
            },
            "sysVolSizeGB": {
              "type": "int"
            },
            "avsetId": {
              "type": "string"
            },
            "vmSize": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [],
          "outputs": {
            "vmProperties": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, parameters('count')))]",
                "input": "[if(and(equals(parameters('ahub'), true()), not(equals(parameters('zones'), createArray()))), createObject('licenseType', 'Windows_Server', 'networkProfile', createObject('networkInterfaces', createArray(parameters('nics')[range(0, parameters('count'))[copyIndex()]])), 'diagnosticsProfile', createObject('bootDiagnostics', createObject('enabled', true())), 'osProfile', createObject('adminPassword', parameters('localAdminPassword'), 'adminUsername', parameters('localAdminUsername'), 'computerName', format('{0}-{1}', parameters('vmNamePrefix'), add(range(0, parameters('count'))[copyIndex()], 1)), 'windowsConfiguration', createObject('timeZone', parameters('timeZoneId'), 'enableAutomaticUpdates', true()), 'allowExtensionOperations', true()), 'storageProfile', createObject('imageReference', createObject('offer', 'WindowsServer', 'publisher', 'MicrosoftWindowsServer', 'sku', '2019-Datacenter', 'version', 'latest'), 'osDisk', createObject('createOption', 'FromImage'), 'dataDisks', createArray(createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('ntdsSizeGB'), 'lun', 0, 'name', format('{0}-{1}-ntds-disk', parameters('vmNamePrefix'), add(range(0, parameters('count'))[copyIndex()], 1))), createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('sysVolSizeGB'), 'lun', 1, 'name', format('{0}-{1}-sysVol-disk', parameters('vmNamePrefix'), add(range(0, parameters('count'))[copyIndex()], 1))))), 'hardwareProfile', createObject('vmSize', parameters('vmSize'))), if(and(equals(parameters('ahub'), true()), equals(parameters('zones'), createArray())), createObject('licenseType', 'Windows_Server', 'availabilitySet', createObject('id', parameters('avsetId')), 'networkProfile', createObject('networkInterfaces', createArray(parameters('nics')[range(0, parameters('count'))[copyIndex()]])), 'diagnosticsProfile', createObject('bootDiagnostics', createObject('enabled', true())), 'osProfile', createObject('adminPassword', parameters('localAdminPassword'), 'adminUsername', parameters('localAdminUsername'), 'computerName', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1)), 'windowsConfiguration', createObject('timeZone', parameters('timeZoneId'), 'enableAutomaticUpdates', true()), 'allowExtensionOperations', true()), 'storageProfile', createObject('imageReference', createObject('offer', 'WindowsServer', 'publisher', 'MicrosoftWindowsServer', 'sku', '2019-Datacenter', 'version', 'latest'), 'osDisk', createObject('createOption', 'FromImage'), 'dataDisks', createArray(createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('ntdsSizeGB'), 'lun', 0, 'name', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1), '-ntds-disk')), createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('sysVolSizeGB'), 'lun', 1, 'name', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1), '-sysVol-disk')))), 'hardwareProfile', createObject('vmSize', parameters('vmSize'))), if(and(equals(parameters('ahub'), false()), equals(parameters('zones'), createArray())), createObject('availabilitySet', createObject('id', parameters('avsetId')), 'networkProfile', createObject('networkInterfaces', createArray(parameters('nics')[range(0, parameters('count'))[copyIndex()]])), 'diagnosticsProfile', createObject('bootDiagnostics', createObject('enabled', true())), 'osProfile', createObject('adminPassword', parameters('localAdminPassword'), 'adminUsername', parameters('localAdminUsername'), 'computerName', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1)), 'windowsConfiguration', createObject('timeZone', parameters('timeZoneId'), 'enableAutomaticUpdates', true()), 'allowExtensionOperations', true()), 'storageProfile', createObject('imageReference', createObject('offer', 'WindowsServer', 'publisher', 'MicrosoftWindowsServer', 'sku', '2019-Datacenter', 'version', 'latest'), 'osDisk', createObject('createOption', 'FromImage'), 'dataDisks', createArray(createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('ntdsSizeGB'), 'lun', 0, 'name', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1), '-ntds-disk')), createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('sysVolSizeGB'), 'lun', 1, 'name', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1), '-sysVol-disk')))), 'hardwareProfile', createObject('vmSize', parameters('vmSize'))), createObject('networkProfile', createObject('networkInterfaces', createArray(parameters('nics')[range(0, parameters('count'))[copyIndex()]])), 'diagnosticsProfile', createObject('bootDiagnostics', createObject('enabled', true())), 'osProfile', createObject('adminPassword', parameters('localAdminPassword'), 'adminUsername', parameters('localAdminUsername'), 'computerName', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1)), 'windowsConfiguration', createObject('timeZone', parameters('timeZoneId'), 'enableAutomaticUpdates', true()), 'allowExtensionOperations', true()), 'storageProfile', createObject('imageReference', createObject('offer', 'WindowsServer', 'publisher', 'MicrosoftWindowsServer', 'sku', '2019-Datacenter', 'version', 'latest'), 'osDisk', createObject('createOption', 'FromImage'), 'dataDisks', createArray(createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('ntdsSizeGB'), 'lun', 0, 'name', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1), '-ntds-disk')), createObject('caching', 'None', 'createOption', 'Empty', 'diskSizeGB', parameters('sysVolSizeGB'), 'lun', 1, 'name', concat(parameters('vmNamePrefix'), '-', add(range(0, parameters('count'))[copyIndex()], 1), '-sysVol-disk')))), 'hardwareProfile', createObject('vmSize', parameters('vmSize'))))))]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy-avset')]",
        "[resourceId('Microsoft.Resources/deployments', 'set-dns-nic')]"
      ]
    }
  ]
}